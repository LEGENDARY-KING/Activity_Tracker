/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  Agents are best described as Natural Language Understanding (NLU) modules
 *  that transform user requests into actionable data. You can include agents
 *  in your app, product, or service to determine user intent and respond to the
 *  user in a natural way.
 *
 *  After you create an agent, you can add {@link google.cloud.dialogflow.v2.Intents|Intents}, {@link google.cloud.dialogflow.v2.Contexts|Contexts},
 *  {@link google.cloud.dialogflow.v2.EntityTypes|Entity Types}, {@link google.cloud.dialogflow.v2.WebhookRequest|Webhooks}, and so on to
 *  manage the flow of a conversation and match user input to predefined intents
 *  and actions.
 *
 *  You can create an agent using both Dialogflow Standard Edition and
 *  Dialogflow Enterprise Edition. For details, see
 *  [Dialogflow
 *  Editions](https://cloud.google.com/dialogflow/docs/editions).
 *
 *  You can save your agent for backup or versioning by exporting the agent by
 *  using the {@link google.cloud.dialogflow.v2.Agents.ExportAgent|ExportAgent} method. You can import a saved
 *  agent by using the {@link google.cloud.dialogflow.v2.Agents.ImportAgent|ImportAgent} method.
 *
 *  Dialogflow provides several
 *  [prebuilt
 *  agents](https://cloud.google.com/dialogflow/docs/agents-prebuilt)
 *  for common conversation scenarios such as determining a date and time,
 *  converting currency, and so on.
 *
 *  For more information about agents, see the
 *  [Dialogflow
 *  documentation](https://cloud.google.com/dialogflow/docs/agents-overview).
 * @class
 * @memberof v2
 */
export declare class AgentsClient {
    private _terminated;
    private _opts;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    agentsStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of AgentsClient.
     *
     * @param {object} [options] - The configuration object. See the subsequent
     *   parameters for more details.
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    getAgent(request: protos.google.cloud.dialogflow.v2.IGetAgentRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.dialogflow.v2.IAgent, protos.google.cloud.dialogflow.v2.IGetAgentRequest | undefined, {} | undefined]>;
    getAgent(request: protos.google.cloud.dialogflow.v2.IGetAgentRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2.IAgent, protos.google.cloud.dialogflow.v2.IGetAgentRequest | null | undefined, {} | null | undefined>): void;
    getAgent(request: protos.google.cloud.dialogflow.v2.IGetAgentRequest, callback: Callback<protos.google.cloud.dialogflow.v2.IAgent, protos.google.cloud.dialogflow.v2.IGetAgentRequest | null | undefined, {} | null | undefined>): void;
    setAgent(request: protos.google.cloud.dialogflow.v2.ISetAgentRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.dialogflow.v2.IAgent, protos.google.cloud.dialogflow.v2.ISetAgentRequest | undefined, {} | undefined]>;
    setAgent(request: protos.google.cloud.dialogflow.v2.ISetAgentRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2.IAgent, protos.google.cloud.dialogflow.v2.ISetAgentRequest | null | undefined, {} | null | undefined>): void;
    setAgent(request: protos.google.cloud.dialogflow.v2.ISetAgentRequest, callback: Callback<protos.google.cloud.dialogflow.v2.IAgent, protos.google.cloud.dialogflow.v2.ISetAgentRequest | null | undefined, {} | null | undefined>): void;
    deleteAgent(request: protos.google.cloud.dialogflow.v2.IDeleteAgentRequest, options?: gax.CallOptions): Promise<[protos.google.protobuf.IEmpty, protos.google.cloud.dialogflow.v2.IDeleteAgentRequest | undefined, {} | undefined]>;
    deleteAgent(request: protos.google.cloud.dialogflow.v2.IDeleteAgentRequest, options: gax.CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dialogflow.v2.IDeleteAgentRequest | null | undefined, {} | null | undefined>): void;
    deleteAgent(request: protos.google.cloud.dialogflow.v2.IDeleteAgentRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.dialogflow.v2.IDeleteAgentRequest | null | undefined, {} | null | undefined>): void;
    getValidationResult(request: protos.google.cloud.dialogflow.v2.IGetValidationResultRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.dialogflow.v2.IValidationResult, protos.google.cloud.dialogflow.v2.IGetValidationResultRequest | undefined, {} | undefined]>;
    getValidationResult(request: protos.google.cloud.dialogflow.v2.IGetValidationResultRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.dialogflow.v2.IValidationResult, protos.google.cloud.dialogflow.v2.IGetValidationResultRequest | null | undefined, {} | null | undefined>): void;
    getValidationResult(request: protos.google.cloud.dialogflow.v2.IGetValidationResultRequest, callback: Callback<protos.google.cloud.dialogflow.v2.IValidationResult, protos.google.cloud.dialogflow.v2.IGetValidationResultRequest | null | undefined, {} | null | undefined>): void;
    trainAgent(request: protos.google.cloud.dialogflow.v2.ITrainAgentRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    trainAgent(request: protos.google.cloud.dialogflow.v2.ITrainAgentRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    trainAgent(request: protos.google.cloud.dialogflow.v2.ITrainAgentRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    exportAgent(request: protos.google.cloud.dialogflow.v2.IExportAgentRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.cloud.dialogflow.v2.IExportAgentResponse, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    exportAgent(request: protos.google.cloud.dialogflow.v2.IExportAgentRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.cloud.dialogflow.v2.IExportAgentResponse, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    exportAgent(request: protos.google.cloud.dialogflow.v2.IExportAgentRequest, callback: Callback<LROperation<protos.google.cloud.dialogflow.v2.IExportAgentResponse, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    importAgent(request: protos.google.cloud.dialogflow.v2.IImportAgentRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    importAgent(request: protos.google.cloud.dialogflow.v2.IImportAgentRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    importAgent(request: protos.google.cloud.dialogflow.v2.IImportAgentRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    restoreAgent(request: protos.google.cloud.dialogflow.v2.IRestoreAgentRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    restoreAgent(request: protos.google.cloud.dialogflow.v2.IRestoreAgentRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    restoreAgent(request: protos.google.cloud.dialogflow.v2.IRestoreAgentRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.protobuf.IStruct>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    searchAgents(request: protos.google.cloud.dialogflow.v2.ISearchAgentsRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.dialogflow.v2.IAgent[], protos.google.cloud.dialogflow.v2.ISearchAgentsRequest | null, protos.google.cloud.dialogflow.v2.ISearchAgentsResponse]>;
    searchAgents(request: protos.google.cloud.dialogflow.v2.ISearchAgentsRequest, options: gax.CallOptions, callback: PaginationCallback<protos.google.cloud.dialogflow.v2.ISearchAgentsRequest, protos.google.cloud.dialogflow.v2.ISearchAgentsResponse | null | undefined, protos.google.cloud.dialogflow.v2.IAgent>): void;
    searchAgents(request: protos.google.cloud.dialogflow.v2.ISearchAgentsRequest, callback: PaginationCallback<protos.google.cloud.dialogflow.v2.ISearchAgentsRequest, protos.google.cloud.dialogflow.v2.ISearchAgentsResponse | null | undefined, protos.google.cloud.dialogflow.v2.IAgent>): void;
    /**
     * Equivalent to {@link searchAgents}, but returns a NodeJS Stream object.
     *
     * This fetches the paged responses for {@link searchAgents} continuously
     * and invokes the callback registered for 'data' event for each element in the
     * responses.
     *
     * The returned object has 'end' method when no more elements are required.
     *
     * autoPaginate option will be ignored.
     *
     * @see {@link https://nodejs.org/api/stream.html}
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project to list agents from.
     *   Format: `projects/<Project ID or '-'>`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Agent]{@link google.cloud.dialogflow.v2.Agent} on 'data' event.
     */
    searchAgentsStream(request?: protos.google.cloud.dialogflow.v2.ISearchAgentsRequest, options?: gax.CallOptions): Transform;
    /**
     * Equivalent to {@link searchAgents}, but returns an iterable object.
     *
     * for-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The project to list agents from.
     *   Format: `projects/<Project ID or '-'>`.
     * @param {number} [request.pageSize]
     *   Optional. The maximum number of items to return in a single page. By
     *   default 100 and at most 1000.
     * @param {string} request.pageToken
     *   The next_page_token value returned from a previous list request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
     */
    searchAgentsAsync(request?: protos.google.cloud.dialogflow.v2.ISearchAgentsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.cloud.dialogflow.v2.IAgent>;
    /**
     * Return a fully-qualified agent resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    agentPath(project: string): string;
    /**
     * Parse the project from Agent resource.
     *
     * @param {string} agentName
     *   A fully-qualified path representing Agent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAgentName(agentName: string): string | number;
    /**
     * Return a fully-qualified entityType resource name string.
     *
     * @param {string} project
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    entityTypePath(project: string, entityType: string): string;
    /**
     * Parse the project from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Parse the entity_type from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromEntityTypeName(entityTypeName: string): string | number;
    /**
     * Return a fully-qualified environment resource name string.
     *
     * @param {string} project
     * @param {string} environment
     * @returns {string} Resource name string.
     */
    environmentPath(project: string, environment: string): string;
    /**
     * Parse the project from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEnvironmentName(environmentName: string): string | number;
    /**
     * Parse the environment from Environment resource.
     *
     * @param {string} environmentName
     *   A fully-qualified path representing Environment resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromEnvironmentName(environmentName: string): string | number;
    /**
     * Return a fully-qualified intent resource name string.
     *
     * @param {string} project
     * @param {string} intent
     * @returns {string} Resource name string.
     */
    intentPath(project: string, intent: string): string;
    /**
     * Parse the project from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromIntentName(intentName: string): string | number;
    /**
     * Parse the intent from Intent resource.
     *
     * @param {string} intentName
     *   A fully-qualified path representing Intent resource.
     * @returns {string} A string representing the intent.
     */
    matchIntentFromIntentName(intentName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified projectAgentEnvironmentUserSessionContext resource name string.
     *
     * @param {string} project
     * @param {string} environment
     * @param {string} user
     * @param {string} session
     * @param {string} context
     * @returns {string} Resource name string.
     */
    projectAgentEnvironmentUserSessionContextPath(project: string, environment: string, user: string, session: string, context: string): string;
    /**
     * Parse the project from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the environment from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the user from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the session from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Parse the context from ProjectAgentEnvironmentUserSessionContext resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionContextName
     *   A fully-qualified path representing project_agent_environment_user_session_context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromProjectAgentEnvironmentUserSessionContextName(projectAgentEnvironmentUserSessionContextName: string): string | number;
    /**
     * Return a fully-qualified projectAgentEnvironmentUserSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} environment
     * @param {string} user
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectAgentEnvironmentUserSessionEntityTypePath(project: string, environment: string, user: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the environment from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the environment.
     */
    matchEnvironmentFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the user from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the user.
     */
    matchUserFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectAgentEnvironmentUserSessionEntityType resource.
     *
     * @param {string} projectAgentEnvironmentUserSessionEntityTypeName
     *   A fully-qualified path representing project_agent_environment_user_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectAgentEnvironmentUserSessionEntityTypeName(projectAgentEnvironmentUserSessionEntityTypeName: string): string | number;
    /**
     * Return a fully-qualified projectAgentSessionContext resource name string.
     *
     * @param {string} project
     * @param {string} session
     * @param {string} context
     * @returns {string} Resource name string.
     */
    projectAgentSessionContextPath(project: string, session: string, context: string): string;
    /**
     * Parse the project from ProjectAgentSessionContext resource.
     *
     * @param {string} projectAgentSessionContextName
     *   A fully-qualified path representing project_agent_session_context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentSessionContextName(projectAgentSessionContextName: string): string | number;
    /**
     * Parse the session from ProjectAgentSessionContext resource.
     *
     * @param {string} projectAgentSessionContextName
     *   A fully-qualified path representing project_agent_session_context resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentSessionContextName(projectAgentSessionContextName: string): string | number;
    /**
     * Parse the context from ProjectAgentSessionContext resource.
     *
     * @param {string} projectAgentSessionContextName
     *   A fully-qualified path representing project_agent_session_context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromProjectAgentSessionContextName(projectAgentSessionContextName: string): string | number;
    /**
     * Return a fully-qualified projectAgentSessionEntityType resource name string.
     *
     * @param {string} project
     * @param {string} session
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    projectAgentSessionEntityTypePath(project: string, session: string, entityType: string): string;
    /**
     * Parse the project from ProjectAgentSessionEntityType resource.
     *
     * @param {string} projectAgentSessionEntityTypeName
     *   A fully-qualified path representing project_agent_session_entity_type resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the session from ProjectAgentSessionEntityType resource.
     *
     * @param {string} projectAgentSessionEntityTypeName
     *   A fully-qualified path representing project_agent_session_entity_type resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName: string): string | number;
    /**
     * Parse the entity_type from ProjectAgentSessionEntityType resource.
     *
     * @param {string} projectAgentSessionEntityTypeName
     *   A fully-qualified path representing project_agent_session_entity_type resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromProjectAgentSessionEntityTypeName(projectAgentSessionEntityTypeName: string): string | number;
    /**
     * Terminate the GRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     */
    close(): Promise<void>;
}
